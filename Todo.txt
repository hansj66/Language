0) Fix return type definition in functions. Formalize basic type system. Function calls can be part of expressions.
0) Function call execute should take an expression list
0) Array type
0) %destructor definitions for other types ?
0) More consistent use of pointers in string arguments
0) Comment syntax "Let there be..."

0) Return statement. Check return type for function against expression type

printing of string expressions (format, newline som egen kommando etc). MÃ¥ ha med quoted string i lexer

    Blog post series
        a) Syntax. Lexer / parser (without semantic actions)
        b) SymbolTable / Activation records
        c) Type system
        d) Interpreter
        e) emitting code

0) List of exit codes.
0) For main: use exit-call + return value

2) Error output to std::cerr ?
3) How to handle the return statement ? (Just put the return value (evaluated expr) in the AR and indicate function exit ?)
4) Symboltable: Check for duplicates when inserting new names
    name + argument count + argument types. Overloading should be allowed
5) README: Add versioninfo for flex, bison + aditional build steps
6) Clean up code repository. Consider introducing AST namespace ? Split AST classes into separate files in separate folder
7) More advanced type system
8) STL Generation (gear). Latham-type structures

Code
===

1) Type system. Type checking
2) Add VLD to check for memory leaks
3) Blog post series (new code category)

Idea dump / Features:
==============
0) Ability to read from stdin / pipes
1) Ability to do simple web requests
2) Simple STL generation (gears)
2) Ideas from flow programming ?

Syntax / keywords:
=====

1) No comment syntax (yet)
2) EOL
3) Deny / pray



Backend
Emit AVR Code ?
