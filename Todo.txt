0) FunctionCall:Execute: Push the number of arguments as the last arg on the stack (validate against this in FunctionNode::Execute)
1) FunctionNode:Execute: Pop argcount from stack. Then zero or more args. Verify type against signature
2) Error output to std::cerr ?
3) How to handle the return statement ? (Just put the return value (evaluated expr) in the AR and indicate function exit ?)
4) Symboltable: Check for duplicates when inserting new names
    name + argument count + argument types. Overloading should be allowed
5) README: Add versioninfo for flex, bison + aditional build steps
6) Clean up code repository. Consider introducing AST namespace ? Split AST classes into separate files in separate folder

Code
===

0) Better node type definitions. Follow AST defines. No more dynamic casts
1) Syntax + AST Node for function call
2) Symbol table. Add entry for
    a) variables (on declaration)
    b) functions (on declaration. Save AST Node)
3) Type system. Type checking
4) Activation records for functions
5) Add VLD to check for memory leaks
6) Blog post series (new code category)

Idea dump / Features:
==============
0) Ability to read from stdin / pipes
1) Ability to do simple web requests
2) Simple STL generation (gears)
2) Ideas from flow programming ?

Syntax / keywords:
=====

1) No comment syntax (yet)
2) EOL
3)



Backend
Emit AVR Code ?
