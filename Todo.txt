Gjenstående funksjonalitet:

0) Se på hvordan man kan fjerne lexer-klasse. Er det egentlig behov for denne ?
0) Return error to parser instead of calling exit(EXIT_FAILED);
0) Test på antall forventede argumenter ved oppstart.  Feilmelding hvis feil antall argumenter pushes
    Segfaulter hvis ingen argumenter sendes på kommandolinja. Må pushe "0" uten args
    Får stack corruption hvis den forventer argumenter, men ikke får det
    ingen feil hvis den får argumenter den ikke forventer
2) There be memory leaks. Use shared_ptr ?
3) Se om translator::print kan fjernes
4) Få inn basic mattefunksjoner
5) Dropp automatisk \n. La heller dette  dokumenteres i språket
6) Tester:  alle normalcaser. returnverdier, return i expressions, typekonflikter etc
7) Få med linjenummer i alle feilmeldinger. Søk etter define. Standard formattering på feilmeldinger. Bruk error-funksjon fra parser.yy
    Rensk opp i formatet på feilmeldinger - output
8) Array/Collection-type: Bag (Stuff into, fetch, empty)
10) %destructor definitions for other types ?
11) More consistent use of pointers in string arguments
13) For main: use exit-call + return value. Better / common logging
15) README: Add versioninfo for flex, bison + aditional build steps
16) Clean up code repository. Consider introducing AST namespace ? Split AST classes into separate files in separate folder
17) STL Generation (gear). Latham-type structures
18) Lag scripture-aktig syntaks/semantikk. Legg inn litt udda funksjoner.

Neste bloggpost1:
    beskriv sammenhengen mellom lexer (tokens fra parser), semantic actions (konstruksjon av AST), annotering av noder i AST mtp typesjekking
    symboltabell. stack for parameteroverføring, activation records. that's about it - for now
    Hvordan få fram dualiteten i AST-nodene. Constructors kaller deler av symboltabell, mens execute kaller en annen del. Kankjse
    symboltabellklassen bør splittes i to ? Hva heter isåfall AR-manager-klassen ?
    (kan gjøres som semanting actions i et statisk typet språk. Må gjøres runtime i et dynamisk typet språk (derfor hot med TDD etc iom at rockstars liker dynamiske språk, så er testbehovet stort. Kan ta ned masse feil allerede i parseren)
    lexer (enkelt eksempel + full syntaks

    Tegn klassediagrammer i draw.io (lexer, parser, AST-tre)

Neste bloggpost2:
    Ze lexer: enkelt eksempel + reellt eksempel fra språket. Kommenter hver linje
    eksempel på hvordan kjøre lex, outputfiler, kompilere og kjøre resultatets

siste blogpost:
    mac, linux og windooz-versjon av scripture

    Blog post series
        a) Syntax. Lexer / parser (without semantic actions)
        b) SymbolTable / Activation records
        c) Type system
        d) Interpreter
        e) emitting code

Code
===

1) Type system. Type checking
2) Add VLD to check for memory leaks
3) Blog post series (new code category)

Idea dump / Features:
==============
0) Ability to read from stdin / pipes
1) Ability to do simple web requests
2) Simple STL generation (gears)
2) Ideas from flow programming ?

Syntax / keywords:
=====

1) No comment syntax (yet)
2) EOL
3) Deny / pray / let there be
4) LT: inferior to, superior to, the equal to, no lesser than, is created equal to

Backend
Emit AVR Code ?
