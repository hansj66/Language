Gjenstående funksjonalitet:

0) Blogpost. lexer. BNF. Vis yy-fragmenter som er ansvarlige for å generere noder
0) Bruke make_shared ? Hvilken versjon av clang er denne tilgjengelig i ? (evt boost shared)
0) Bruk auto ranges
2) There be memory leaks. Bruke make_shared istedet for new ?
1) Return error to parser instead of calling exit(EXIT_FAILED); eller kall riktig parse error
3) Få inn basic mattefunksjoner
4) Dropp automatisk \n. La heller dette  dokumenteres i språket
5) Tester:  alle normalcaser. returnverdier, return i expressions, typekonflikter etc
6) Få med linjenummer i alle feilmeldinger. Søk etter define. Standard formattering på feilmeldinger. Bruk error-funksjon fra parser.yy
    Rensk opp i formatet på feilmeldinger - output
7) Array/Collection-type: Bag (Stuff into, fetch, empty)
11) More consistent use of pointers in string arguments
13) For main: use exit-call + return value. Better / common logging
15) README: Add versioninfo for flex, bison + aditional build steps, boost, clang version etc
17) STL Generation (gear). Latham-type structures
18) Lag scripture-aktig syntaks/semantikk. Legg inn litt udda funksjoner.

Neste bloggpost1:
    beskriv sammenhengen mellom lexer (tokens fra parser), semantic actions (konstruksjon av AST), annotering av noder i AST mtp typesjekking
    symboltabell. stack for parameteroverføring, activation records. that's about it - for now
    Hvordan få fram dualiteten i AST-nodene. Constructors kaller deler av symboltabell, mens execute kaller en annen del. Kankjse
    symboltabellklassen bør splittes i to ? Hva heter isåfall AR-manager-klassen ?
    (kan gjøres som semanting actions i et statisk typet språk. Må gjøres runtime i et dynamisk typet språk (derfor hot med TDD etc iom at rockstars liker dynamiske språk, så er testbehovet stort. Kan ta ned masse feil allerede i parseren)
    lexer (enkelt eksempel + full syntaks

    Tegn klassediagrammer i draw.io (lexer, parser, AST-tre)

Neste bloggpost2:
    Ze lexer: enkelt eksempel + reellt eksempel fra språket. Kommenter hver linje
    eksempel på hvordan kjøre lex, outputfiler, kompilere og kjøre resultatets

siste blogpost:
    mac, linux og windooz-versjon av scripture

    Blog post series
        a) Syntax. Lexer / parser (without semantic actions)
        b) SymbolTable / Activation records
        c) Type system
        d) Interpreter
        e) emitting code

Idea dump / Features:
==============
0) Ability to read from stdin / pipes
1) Ability to do simple web requests
2) Simple STL generation (gears)
2) Ideas from flow programming ?

Syntax / keywords:
=====

1) No comment syntax (yet)
2) EOL
3) Deny / pray / let there be
4) LT: inferior to, superior to, the equal to, no lesser than, is created equal to

Backend
Emit AVR Code ?
